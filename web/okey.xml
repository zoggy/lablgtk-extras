<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<page name="okey"><title>Okey</title>
<section name="okey:intro">
<en>The Okey module contains some convenient functions to add handlers
for key press events in LablGtk2 applications.
</en>
<fr>Le module Okey contient des fonctions de convenance pour ajouter
des gestionnaires d'événéments de type "pression de touche" dans
les applications utilisant LablGtk2.
</fr>
</section>

<section name="okey:documentation">
<title><en>Documentation</en><fr>Documentation</fr></title>
<p>
<en>The documentation generated by OCamldoc can be browsed </en>
<fr>La documentation générée par OCamldoc est accessible  </fr>
<link href="ocamldoc/Okey.html"><en>here</en><fr>ici</fr></link>.
</p>
</section>

<section name="okey:example">
<title><en>Example</en><fr>Exemple d'utilisation</fr></title>
<en>The following example creates a window with a label in it
displaying the handled key press events. Some handlers show
a message box and one handler quits.
</en>
<fr>L'exemple suivant crée une fenêtre avec un label dedans,
pour afficher la liste des pressions de touches gérées. Certaines
touches déclenchent l'affichage d'un message dans une boîte de
message, et une certaine combinaison de touches permet de quitter
l'application.
</fr>
<sample><![CDATA[
(* Compile with
  ocamlfind ocamlc -o okey_example.x -package lablgtk2-extras -linkpkg <this_file> *)

let _ = GMain.Main.init ()
let w = GWindow.window
    ~title: "Okey example" ~width: 300 ~height: 300 ()

let message s () =
  GToolbox.message_box "Okey example message" s

let callbacks =
  [
    GdkKeysyms._k, [`MOD1], "Alt-k", "Hello", message "Hello" ;
    GdkKeysyms._w, [], "w", "World", message "World" ;
    GdkKeysyms._q, [`CONTROL], "Ctrl-q", "Quit", GMain.Main.quit ;
  ]

let txt = "Available shortcuts:\n"^
  (String.concat "\n"
     (List.map (fun (_,_,s,l,_) -> Printf.sprintf "%s: %s" s l) callbacks)
  )

let wl = GMisc.label ~text: txt ~packing: w#add ()

(* Here we add the handlers for some key press events *)
let _ = List.iter
    (fun (k,mods,_,_,f) -> Okey.add w ~mods k f)
    callbacks

let _ = w#show ()
let _ = GMain.Main.main ()
]]></sample>
</section>

</page>
